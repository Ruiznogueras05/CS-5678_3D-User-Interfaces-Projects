//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/h-go-go-Ruiznogueras05CT/Samples/StarterAssets/InputActions/XRC Go-GoToggle (Input Action Reference).inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRCGoGoToggleInputActionReference: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRCGoGoToggleInputActionReference()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRC Go-GoToggle (Input Action Reference)"",
    ""maps"": [
        {
            ""name"": ""Toggle"",
            ""id"": ""e95d010c-2b85-49b4-a4c3-aa0532cbca89"",
            ""actions"": [
                {
                    ""name"": ""ToggleGoGo"",
                    ""type"": ""Button"",
                    ""id"": ""ba4725cc-4b4f-4039-9f45-84d7b232d4e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0acd8260-44df-42b4-910c-f0f2d1c925e8"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleGoGo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Toggle
        m_Toggle = asset.FindActionMap("Toggle", throwIfNotFound: true);
        m_Toggle_ToggleGoGo = m_Toggle.FindAction("ToggleGoGo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Toggle
    private readonly InputActionMap m_Toggle;
    private List<IToggleActions> m_ToggleActionsCallbackInterfaces = new List<IToggleActions>();
    private readonly InputAction m_Toggle_ToggleGoGo;
    public struct ToggleActions
    {
        private @XRCGoGoToggleInputActionReference m_Wrapper;
        public ToggleActions(@XRCGoGoToggleInputActionReference wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleGoGo => m_Wrapper.m_Toggle_ToggleGoGo;
        public InputActionMap Get() { return m_Wrapper.m_Toggle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToggleActions set) { return set.Get(); }
        public void AddCallbacks(IToggleActions instance)
        {
            if (instance == null || m_Wrapper.m_ToggleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToggleActionsCallbackInterfaces.Add(instance);
            @ToggleGoGo.started += instance.OnToggleGoGo;
            @ToggleGoGo.performed += instance.OnToggleGoGo;
            @ToggleGoGo.canceled += instance.OnToggleGoGo;
        }

        private void UnregisterCallbacks(IToggleActions instance)
        {
            @ToggleGoGo.started -= instance.OnToggleGoGo;
            @ToggleGoGo.performed -= instance.OnToggleGoGo;
            @ToggleGoGo.canceled -= instance.OnToggleGoGo;
        }

        public void RemoveCallbacks(IToggleActions instance)
        {
            if (m_Wrapper.m_ToggleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IToggleActions instance)
        {
            foreach (var item in m_Wrapper.m_ToggleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToggleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ToggleActions @Toggle => new ToggleActions(this);
    public interface IToggleActions
    {
        void OnToggleGoGo(InputAction.CallbackContext context);
    }
}
